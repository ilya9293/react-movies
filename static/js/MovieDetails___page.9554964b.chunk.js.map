{"version":3,"file":"static/js/MovieDetails___page.9554964b.chunk.js","mappings":"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","sources":["components/NavAddInfo/NavAddInfo.jsx","components/Button/Button.jsx","pages/MovieDetailsPage.jsx","services/api.js","services/tostify.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nfunction NavAddInfo({ path, name, location }) {\n  return (\n    <NavLink\n      to={{\n        pathname: path,\n        state: {\n          from: location.state?.from,\n        },\n      }}\n      className={'listInfo__link'}\n    >\n      {name}\n    </NavLink>\n  );\n}\n\nNavAddInfo.propTypes = {\n  path: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  location: PropTypes.object,\n};\n\nexport default NavAddInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Button({ name, onClick }) {\n  return (\n    <button onClick={onClick} className=\"button\">\n      Go back to {name === '/movies' ? 'Movies' : 'Home'}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  name: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import { lazy, Suspense } from 'react';\nimport notify from 'services/tostify';\n// import PropTypes from 'prop-types';\nimport { apiOneMovie } from '../services/api';\nimport {\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport NavAddInfo from 'components/NavAddInfo';\n// import Cast from 'components/Cast';\n// import Reviews from 'components/Reviews';\nimport avatar from '../images/avatar.jpg';\nimport Button from 'components/Button';\nconst Cast = lazy(() =>\n  import('../components/Cast' /* webpackChunkName: \"Cast\" */),\n);\nconst Reviews = lazy(() =>\n  import('../components/Reviews' /* webpackChunkName: \"Reviews\" */),\n);\n\nfunction MovieDetailsPage() {\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const match = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getOneMovie = async () => {\n      try {\n        const data = await apiOneMovie(movieId);\n        setMovie(data);\n      } catch (error) {\n        //   alert('Something went wrong');\n        notify('Something went wrong');\n        history.replace('/');\n      }\n    };\n    getOneMovie();\n  }, [history, movieId]);\n\n  const {\n    id,\n    poster_path,\n    title,\n    name,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movie;\n\n  const realeaseMovie = new Date(release_date).getFullYear();\n\n  const handleBack = () => {\n    history.push(location.state?.from ?? '/');\n  };\n\n  return (\n    <section className=\"sectionOneMovie\">\n      <Button onClick={handleBack} name={location.state?.from?.pathname} />\n      {id && (\n        <>\n          <div className=\"info\">\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                  : avatar\n              }\n              alt={title}\n              className=\"poster\"\n            />\n            <div className=\"containerForInfo\">\n              <h1 className=\"mainTitle\">\n                {title}\n                {name} {`(${realeaseMovie})`}\n              </h1>\n              <p className=\"userScore\">{`User score: ${Math.round(\n                vote_average * 10,\n              )}%`}</p>\n              <h2 className=\"titleOverview\">Overview</h2>\n              <p className=\"overview\">{overview}</p>\n              <h2 className=\"titleGenres\">Genres</h2>\n              <ul className=\"listGenres\">\n                {genres.map(({ id, name }) => (\n                  <li key={id} className=\"listGenres__item\">\n                    <p className=\"listGenres__text\">{name}</p>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <div className=\"addInfo\">\n            <section className=\"navAddInfo\">\n              <h3 className=\"titleAddInfo\">Additional information</h3>\n              <ul className=\"listInfo\">\n                <li className=\"listInfo__item\">\n                  <NavAddInfo\n                    path={`${match.url}/cast`}\n                    name={'Cast'}\n                    location={location}\n                  />\n                </li>\n                <li className=\"listInfo__item\">\n                  <NavAddInfo\n                    path={`${match.url}/reviews`}\n                    name={'Reviews'}\n                    location={location}\n                  />\n                </li>\n              </ul>\n            </section>\n          </div>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              <Route path={`${match.path}/cast`}>\n                <Cast />\n              </Route>\n              <Route path={`${match.path}/reviews`}>\n                <Reviews />\n              </Route>\n            </Switch>\n          </Suspense>\n        </>\n      )}\n    </section>\n  );\n}\n\n// MovieDetailsPage.propTypes = {};\n\nexport default MovieDetailsPage;\n","const KEY = '88cb0f604f2d1a4c96f62a0a73ad3d75';\n\nconst apiTrends = async () => {\n  //   return  fetch(url).then(response => response.json());\n  const res = await fetch(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`,\n  );\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nconst apiSearch = async query => {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`,\n  );\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nconst apiOneMovie = async id => {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US`,\n  );\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nconst apiCast = async id => {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}&language=en-US`,\n  );\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nconst apiReview = async id => {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  );\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nexport { apiTrends, apiSearch, apiOneMovie, apiCast, apiReview };\n","import { toast } from 'react-toastify';\n\nconst notify = request => toast.warn(request);\n\nexport default notify;\n"],"names":["path","name","location","to","pathname","state","from","className","onClick","Cast","lazy","Reviews","useState","movie","setMovie","movieId","useParams","match","useRouteMatch","history","useHistory","useLocation","useEffect","getOneMovie","apiOneMovie","data","notify","replace","id","poster_path","title","release_date","vote_average","overview","genres","realeaseMovie","Date","getFullYear","push","src","avatar","alt","Math","round","map","url","Suspense","fallback","KEY","apiTrends","fetch","res","ok","json","Promise","reject","Error","statusText","apiSearch","query","apiCast","apiReview","request","toast"],"sourceRoot":""}